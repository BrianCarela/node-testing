<!DOCTYPE html>
<html>
<head>
  <title>Music Visualiser</title>
  <style type="text/css">
    #mp3_player{width: 500px; height: 60px; background-color: #000; padding: 5px; margin: 50px auto;
    }
    #audio_box{width: 500px; background-color: #000;
    }
    canvas{ width: 500px; height: 30px; background-color: #002D3C;
    }
  </style>
</head>
<body>
  <!-- <audio id="heat" src="audio/WarmItUp.mp3" autobuffer autoloop loop controls></audio> -->

  <div id="mp3_player">
    <div id="audio_box"></div>
    <canvas id="visualiser"></canvas>
  </div>

  <script type="text/javascript" charset="utf-8" async defer>
    // keeping this here for later, CORS issues on both techniques.


    // window.onload = function() {
    //   var ctx = new AudioContext();
    //   var audio = document.getElementById('heat');
    //   // audio.crossOrigin = "anonymous";
    //   var audioSrc = ctx.createMediaElementSource(audio);
    //   var analyser = ctx.createAnalyser();
    //   // we have to connect the MediaElementSource with the analyser
    //   audioSrc.connect(analyser);
    //   // we could configure the analyser: e.g. analyser.fftSize (for further infos read the spec)

    //   // frequencyBinCount tells you how many values you'll receive from the analyser
    //   var frequencyData = new Uint8Array(analyser.frequencyBinCount);

    //   // we're ready to receive some data!
    //   // loop
    //   function renderFrame() {
    //     requestAnimationFrame(renderFrame);
    //     // update data in frequencyData
    //     analyser.getByteFrequencyData(frequencyData);
    //     // render frame based on values in frequencyData
    //     // console.log(frequencyData)
    //   }
    //   audio.start();
    //   renderFrame();
    // };

    // create a new instance of an audio object, give it some properties manually
    var audio = new Audio();
    // audio.crossOrigin = 'Anonymous'; // DOESN'T WORK??
    audio.src = "../../audio/WarmItUp.mp3";
    audio.controls = true;
    audio.loop = true;
    audio.autoplay = false;

    // These are all the variables that the analyzer will need.
    var canvas, ctx, source, context, analyser, fbc_array, bars, bar_x, bar_width, bar_height;

    // Initializes the mp3 player after the page loads all HTML into the window
    window.addEventListener("load", initmp3player, false);

    function initmp3player() {
      // plug in the aux!!
      document.getElementById('audio_box').appendChild(audio);
      context = new AudioContext(); // AudioContext object instance
      analyser = context.createAnalyser(); // Analyser node method. Idk if this works w.o web-audio-api
      canvas = document.getElementById('visualiser');
      ctx = canvas.getContext('2d');
      // Re-route the audio playback into the processing graph of the AudioContext.
      source = context.createMediaElementSource(audio);
      source.connect(analyser);
      analyser.connect(context.destination);
      frameLooper(); // this is defined below
    }

    // frameLooper() is the visualiser itself, natively at 60fps
    function frameLooper() {
      window.requestAnimationFrame(frameLooper); // recursive yaaay, for looping
      fbc_array = new Uint8Array(analyser.frequencyBinCount);
      analyser.getByteFrequencyData(fbc_array);
      ctx.clearRect(0, 0, canvas.width, canvas.height); // clear the canvas every loop
      ctx.fillStyle = '#00CCFF'; // color of the bars. I chose sky blue
      bars = 100; // how many bars to render. 128 might make the most sense
      for(var i = 0; i < bars; i++){
        bar_x = i * 3; // each bar is 3 pixels apart on the x axis
        bar_width = 2; // each bar is 2 pixels wide. 0-1 is a bar, 2 is not, 3-4 is a bar, etc.
        bar_height = -(fbc_array[i] / 2); // frequency data, of the current index. The amplitude
        // fillRect(x, y, width, height) // explanation of the parameters below
        ctx.fillRect(bar_x, canvas.height, bar_width, bar_height); // this draws the bars themselves
      }
    }
  </script>
</body>
</html>
